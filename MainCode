/* 
  Sketch generated by the Arduino IoT Cloud Thing "SoccerCar"
  https://create.arduino.cc/cloud/things/483646e6-00c7-4f28-ad2b-7f6c51cb850c 
  
  #in collaboration with Kevin ELX3/4

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool forward;
  bool reverse;
  bool turnLeft;
  bool turnRight;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
int ledpin = 2;

//pins for LR direction
//#define motor1Pin1 27 
//#define motor1Pin2 26 
int motor1Pin1 = 27;
int motor1Pin2 = 26;
int motor2Pin1 = 25;
int motor2Pin2 = 33;
int motor1Speed = 13;
int motor2Speed = 32;



void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(ledpin, OUTPUT);
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(motor1Speed, OUTPUT);
  pinMode(motor2Speed, OUTPUT);


  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  //delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  //analogWrite(motor1Speed, 255); //255 = Max speed, 0 = off))
  //analogWrite(motor2Speed, 255);
 // delay(2000);
  //analogWrite(motor1Speed, 100);
 // analogWrite(motor2Speed, 100);
  //delay(2000);
  



}

//forward code
void onForwardChange() {
if (forward == HIGH)
{
 //Serial.println(Moving Forwards);
 
  analogWrite(motor1Speed, 200); //255 = Max speed, 0 = off))
  analogWrite(motor2Speed, 245);
 digitalWrite(motor1Pin1, HIGH);
 digitalWrite(motor1Pin2, LOW);
 digitalWrite(motor2Pin1, HIGH);
 digitalWrite(motor2Pin2, LOW);
}
else if (forward == LOW)
{
 //Serial.println("Car stopped");
 digitalWrite(motor1Pin1, LOW);
 digitalWrite(motor1Pin2, LOW);
 digitalWrite(motor2Pin1, LOW);
 digitalWrite(motor2Pin2, LOW);
}
}


void onReverseChange() {
if (reverse == HIGH)
{
 //Serial.println("Moving Backwards");
 analogWrite(motor1Speed, 150); //255 = Max speed, 0 = off))
 analogWrite(motor2Speed, 180);
 digitalWrite(motor1Pin1, LOW);
 digitalWrite(motor1Pin2, HIGH);
 digitalWrite(motor2Pin1, LOW);
 digitalWrite(motor2Pin2, HIGH);
 
 
}

else if (reverse == LOW)
{
 //Serial.println("Car Stopped");
 digitalWrite(motor1Pin1, LOW);
 digitalWrite(motor1Pin2, LOW);
 digitalWrite(motor2Pin1, LOW);
 digitalWrite(motor2Pin2, LOW);
}
}

//backwardcode

void onTurnLeftChange() {
if (turnLeft == HIGH)
{
 analogWrite(motor1Speed, 130); //255 = Max speed, 0 = off))
 analogWrite(motor2Speed, 180);
 Serial.println("LEFT");
 digitalWrite(motor1Pin1, LOW);
 digitalWrite(motor1Pin2, HIGH);
 digitalWrite(motor2Pin1, HIGH);
 digitalWrite(motor2Pin2, LOW);
}
else if (turnLeft == LOW)
{
 Serial.println("not LEFT");
 digitalWrite(motor1Pin1, LOW);
 digitalWrite(motor1Pin2, LOW);
 digitalWrite(motor2Pin1, LOW);
 digitalWrite(motor2Pin2, LOW);
}
}

void onTurnRightChange() {
if (turnRight == HIGH)
{
 analogWrite(motor1Speed, 120); //255 = Max speed, 0 = off))
 analogWrite(motor2Speed, 170);
 Serial.println("turning left");
 digitalWrite(motor1Pin1, HIGH);
 digitalWrite(motor1Pin2, LOW);
 digitalWrite(motor2Pin1, LOW);
 digitalWrite(motor2Pin2, HIGH);
}
else if (turnRight == LOW)
{
 Serial.println("Not right");
 digitalWrite(motor1Pin1, LOW);
 digitalWrite(motor1Pin2, LOW);
 digitalWrite(motor2Pin1, LOW);
 digitalWrite(motor2Pin2, LOW);
}
}


/*
  Since Speedcontrol is READ_WRITE variable, onSpeedcontrolChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSpeedcontrolChange()  {
//code here
}
